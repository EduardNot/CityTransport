/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Bus;
import io.swagger.model.ErrorMessage;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-07T09:02:41.194Z[GMT]")
@Validated
public interface BusesApi {

    @Operation(summary = "Insert a new bus.", description = "Creates a new bus bus object and save it into database.", tags={ "BusMangagment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returned a new bus object with fullfilled id field from database.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Bus.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid request body content.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/buses",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Bus> createBus(@Parameter(in = ParameterIn.DEFAULT, description = "Information about new bus.", schema=@Schema()) @Valid @RequestBody Bus body);


    @Operation(summary = "Deletes a bus.", description = "Searches for a specific bus with given id and deletes it from database.", tags={ "BusMangagment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Bus with given ID deleted successfully."),
        
        @ApiResponse(responseCode = "404", description = "Bus with given ID not found error.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/buses/{busId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBus(@Parameter(in = ParameterIn.PATH, description = "Common ID parameter of bus.", required=true, schema=@Schema()) @PathVariable("busId") Integer busId);


    @Operation(summary = "Query a list of buses.", description = "Collects all the buses in databases and returnes them as a list.", tags={ "BusMangagment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returned a list of buses.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Bus.class)))) })
    @RequestMapping(value = "/buses",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Bus>> readBuses();


    @Operation(summary = "Updates bus information.", description = "Searches for a specific bus with given id and updates its data.", tags={ "BusMangagment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Returned a updated bus object.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Bus.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid request body content.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
        
        @ApiResponse(responseCode = "404", description = "Bus with given ID not found error.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))) })
    @RequestMapping(value = "/buses/{busId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Bus> updateBus(@Parameter(in = ParameterIn.PATH, description = "Common ID parameter of bus.", required=true, schema=@Schema()) @PathVariable("busId") Integer busId, @Parameter(in = ParameterIn.DEFAULT, description = "Information about bus.", required=true, schema=@Schema()) @Valid @RequestBody Bus body);

}

